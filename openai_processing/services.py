import openai
import os
import json
from dotenv import load_dotenv
from .models import GeneratedJSON

load_dotenv()

openai_client = openai.AzureOpenAI(
    api_key=os.getenv("AZURE_OPENAI_API_KEY"),
    api_version="2023-12-01-preview",
    azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
)

import re

class OpenAIService:
    @staticmethod
    def generate_structured_json(documents):
        """
        Env√≠a los documentos a OpenAI y obtiene un JSON con intenciones y entidades detectadas autom√°ticamente.
        """
        print("‚úÖ Entrando en `generate_structured_json`")

        text_data = [{"filename": doc.file.name, "text": doc.extracted_text} for doc in documents]

        prompt = f"""
        Eres un experto en procesamiento de lenguaje natural (NLP) y comprensi√≥n de intenciones del usuario.
        Tu tarea es analizar los siguientes documentos y extraer autom√°ticamente:
        1. **Intenciones (intents):** Lo que el usuario intenta lograr con el contenido.
        2. **Entidades (entities):** Datos clave mencionados en los documentos.
        3. **Utterances:** Frases de ejemplo que corresponden a cada intenci√≥n y entidad.

        ### **üìå Reglas para la extracci√≥n**
        - Debes identificar **intenciones claras y bien definidas** seg√∫n el contexto del documento.
        - Debes extraer **entidades relevantes** y asociarlas con sus respectivas intenciones.
        - Usa **nombres espec√≠ficos para intents y entities** (evita nombres gen√©ricos como "Intent1" o "Entity1").
        - Para cada intenci√≥n, crea **m√∫ltiples utterances** con las entidades correctamente etiquetadas.

        ---

        ### **üìå Formato de salida requerido**
        Genera un JSON en el siguiente formato, sin incluir ning√∫n texto adicional antes o despu√©s del JSON, ten en cuenta que los datos de las ulterances son ejemplos, tendras que rellenar segun el texto a analizar:

        ```json
        {{
        "projectFileVersion": "2022-10-01-preview",
        "stringIndexType": "Utf16CodeUnit",
        "metadata": {{
            "projectKind": "Conversation",
            "projectName": "AutoGeneratedChatbot",
            "multilingual": true,
            "description": "Proyecto creado a partir de documentos procesados",
            "language": "es",
            "settings": {{
            "confidenceThreshold": 0.7
            }}
        }},
        "assets": {{
            "projectKind": "Conversation",
            "intents": [
            {{"category": "intent1"}},
            {{"category": "intent2"}}
            ],
            "entities": [
            {{
                "category": "entity1",
                "compositionSetting": "default",
                "list": {{
                "sublists": [
                    {{
                    "listKey": "list1",
                    "synonyms": [
                        {{
                        "language": "es",
                        "values": ["valor1", "valor2"]
                        }}
                    ]
                    }}            
                ]
                }},
                "prebuilts": [
                {{"category": "prebuilt_component"}}
                ],
                "regex": {{
                "expressions": [
                    {{
                    "regexKey": "regex1",
                    "language": "es",
                    "regexPattern": "[0-9]+"
                    }}
                ]
                }},
                "requiredComponents": [
                    "component1"
                ]
            }}
            ],
            "utterances": [
            {{
                "text": "¬øCu√°nto cuesta el LG gram 16Z90R?",
                "intent": "consulta_precio",
                "language": "es",
                "dataset": "default",
                "entities": [
                {{
                    "category": "producto",
                    "offset": 20,
                    "length": 13
                }}
                ]
            }},
            {{
                "text": "Quiero comprar un port√°til con 32GB de RAM",
                "intent": "solicitud_compra",
                "language": "es",
                "dataset": "default",
                "entities": [
                {{
                    "category": "especificacion",
                    "offset": 26,
                    "length": 7
                }}
                ]
            }}
            ]
        }}
        }}
        Aqu√≠ est√°n los documentos a analizar:
        
        {text_data}
        """


        try:
            print("üì° Enviando solicitud a OpenAI...")
            response = openai_client.chat.completions.create(
                model=os.getenv("AZURE_OPENAI_DEPLOYMENT_NAME"),
                messages=[
                    {"role": "system", "content": "Eres un asistente especializado en an√°lisis de documentos."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=1000
            )
            print("‚úÖ Respuesta recibida de OpenAI")

            json_result = response.choices[0].message.content
            print(f"üìú JSON generado antes de limpieza:\n{json_result}")

            # Limpiar triple backticks y la palabra "json"
            json_result = re.sub(r"```json\n?|```", "", json_result).strip()
            print(f"üìú JSON despu√©s de limpieza:\n{json_result}")

            # Convertir a JSON v√°lido
            parsed_json = json.loads(json_result)

            # Guardar en la BD y en el sistema de archivos
            json_instance = GeneratedJSON()
            json_instance.save_json(parsed_json)

            print("‚úÖ JSON guardado en BD y archivos")
            return parsed_json
        except Exception as e:
            print(f"‚ùå Error en `generate_structured_json`: {e}")
            return {"error": str(e)}
